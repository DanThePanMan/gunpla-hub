// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  displayName String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  likes     Likes[]
  following Follows[] @relation("userFollowing")
  followers Follows[] @relation("userFollowers")
  comments Comment[] @relation("userCommented")
}

model Post {
  id Int @id @default(autoincrement())
  authorId  Int
  author User  @relation(fields: [authorId], references: [userId])
  title String
  content String
  likedBy Likes[]
  comments Comment[]
  build Build?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // images will be there eventually
}

model Likes {
  id Int @id @default(autoincrement())
  userId Int
  likedUser User @relation(fields: [userId], references: [userId])
  postId Int
  likedPost Post @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  
  @@unique([userId, postId])
}

model Follows {
  id Int @id @default(autoincrement())
  followerId Int
  followerUser User @relation("userFollowing", fields: [followerId], references: [userId])
  followedId Int
  followedUser User @relation("userFollowers", fields: [followedId], references: [userId])
  createdAt DateTime @default(now())
  
  @@unique([followerId, followedId])
}

model Comment {
  id Int @id @default(autoincrement())
  commenterId Int
  commenterUser User @relation("userCommented", fields: [commenterId], references: [userId])
  
  // Can comment on either a post OR another comment, not both
  postId Int?
  post Post? @relation(fields: [postId], references: [id])
  
  parentCommentId Int?
  parentComment Comment? @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies Comment[] @relation("CommentReplies")
  
  content String
  createdAt DateTime @default(now())
}

model Build {
  id Int @id @default(autoincrement())
  postId Int @unique
  post Post @relation(fields: [postId], references: [id])
  kitName String
  grade String
  difficulty Int?
  customizations String?
  createdAt DateTime @default(now())
}